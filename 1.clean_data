	
#load the dataset carefully because it's large

import pandas as pd

input_file = 'spotify_dataset.csv'
output_file = 'spotify_dataset_cleaned.csv'

#try to read the CSV properly, allowing multi-line lyrics
try:
    df = pd.read_csv(
        input_file,
        engine='python',         # Handles complex CSVs better
        quotechar='"',           # Assume lyrics are properly quoted
        on_bad_lines='skip',     # Skip broken rows if any
        escapechar='\\',         # Handle escaped quotes inside lyrics
    )
    
    print(f"Successfully loaded {len(df)} records.")

    #save cleaned version
    df.to_csv(output_file, index=False)
    print(f"Cleaned dataset saved to {output_file}")

except Exception as e:
    print(f"Error loading file: {e}")
Successfully loaded 498020 records.
Cleaned dataset saved to spotify_dataset_cleaned.csv
cleaned_df = pd.read_csv("spotify_dataset_cleaned.csv", engine="python", on_bad_lines="skip")
len(cleaned_df)
498020
print(cleaned_df.columns.tolist())
['artist', 'song', 'text', 'length', 'emotion', 'genre', 'album', 'release_date', 'key', 'tempo', 'loudness (db)', 'popularity', 'energy', 'danceability', 'positiveness', 'speechiness', 'liveliness', 'acousticness', 'instrumentalness', 'good_for_party', 'good_for_work/study', 'good_for_relaxation/meditation', 'good_for_exercise', 'good_for_running', 'good_for_yoga/stretching', 'good_for_driving', 'good_for_social_gatherings', 'good_for_morning_routine', 'Unnamed: 28', 'Unnamed: 29', 'Unnamed: 30', 'Unnamed: 31', 'Unnamed: 32', 'Unnamed: 33', 'Unnamed: 34', 'Unnamed: 35', 'Unnamed: 36', 'Unnamed: 37', 'Unnamed: 38', 'Unnamed: 39', 'Unnamed: 40', 'Unnamed: 41', 'Unnamed: 42', 'Unnamed: 43', 'Unnamed: 44', 'Unnamed: 45', 'Unnamed: 46', 'Unnamed: 47', 'Unnamed: 48', 'Unnamed: 49', 'Unnamed: 50', 'Unnamed: 51', 'Unnamed: 52', 'Unnamed: 53', 'Unnamed: 54', 'Unnamed: 55', 'Unnamed: 56', 'Unnamed: 57', 'Unnamed: 58', 'Unnamed: 59', 'Unnamed: 60', 'Unnamed: 61', 'Unnamed: 62', 'Unnamed: 63', 'Unnamed: 64', 'Unnamed: 65', 'Unnamed: 66', 'Unnamed: 67', 'Unnamed: 68', 'Unnamed: 69', 'Unnamed: 70', 'Unnamed: 71', 'Unnamed: 72', 'Unnamed: 73', 'Unnamed: 74', 'Unnamed: 75', 'Unnamed: 76', 'Unnamed: 77', 'Unnamed: 78', 'Unnamed: 79', 'Unnamed: 80', 'Unnamed: 81', 'Unnamed: 82', 'Unnamed: 83', 'Unnamed: 84', 'Unnamed: 85', 'Unnamed: 86', 'Unnamed: 87', 'Unnamed: 88', 'Unnamed: 89', 'Unnamed: 90', 'Unnamed: 91', 'Unnamed: 92', 'Unnamed: 93', 'Unnamed: 94', 'Unnamed: 95', 'Unnamed: 96', 'Unnamed: 97', 'Unnamed: 98', 'Unnamed: 99', 'Unnamed: 100', 'Unnamed: 101', 'Unnamed: 102', 'Unnamed: 103', 'Unnamed: 104', 'Unnamed: 105', 'Unnamed: 106', 'Unnamed: 107', 'Unnamed: 108', 'Unnamed: 109', 'Unnamed: 110', 'Unnamed: 111', 'Unnamed: 112', 'Unnamed: 113', 'Unnamed: 114', 'Unnamed: 115', 'Unnamed: 116', 'Unnamed: 117', 'Unnamed: 118', 'Unnamed: 119', 'Unnamed: 120', 'Unnamed: 121', 'Unnamed: 122', 'Unnamed: 123', 'Unnamed: 124', 'Unnamed: 125', 'Unnamed: 126', 'Unnamed: 127', 'Unnamed: 128', 'Unnamed: 129', 'Unnamed: 130', 'Unnamed: 131', 'Unnamed: 132', 'Unnamed: 133', 'Unnamed: 134', 'Unnamed: 135', 'Unnamed: 136', 'Unnamed: 137', 'Unnamed: 138', 'Unnamed: 139', 'Unnamed: 140', 'Unnamed: 141', 'Unnamed: 142', 'Unnamed: 143', 'Unnamed: 144', 'Unnamed: 145', 'Unnamed: 146', 'Unnamed: 147', 'Unnamed: 148', 'Unnamed: 149', 'Unnamed: 150', 'Unnamed: 151', 'Unnamed: 152', 'Unnamed: 153', 'Unnamed: 154', 'Unnamed: 155', 'Unnamed: 156', 'Unnamed: 157', 'Unnamed: 158', 'Unnamed: 159', 'Unnamed: 160', 'Unnamed: 161', 'Unnamed: 162', 'Unnamed: 163', 'Unnamed: 164', 'Unnamed: 165', 'Unnamed: 166', 'Unnamed: 167', 'Unnamed: 168', 'Unnamed: 169', 'Unnamed: 170', 'Unnamed: 171', 'Unnamed: 172', 'Unnamed: 173', 'Unnamed: 174', 'Unnamed: 175', 'Unnamed: 176', 'Unnamed: 177', 'Unnamed: 178', 'Unnamed: 179', 'Unnamed: 180', 'Unnamed: 181', 'Unnamed: 182', 'Unnamed: 183', 'Unnamed: 184', 'Unnamed: 185', 'Unnamed: 186', 'Unnamed: 187', 'Unnamed: 188', 'Unnamed: 189', 'Unnamed: 190', 'Unnamed: 191', 'Unnamed: 192', 'Unnamed: 193', 'Unnamed: 194', 'Unnamed: 195', 'Unnamed: 196', 'Unnamed: 197', 'Unnamed: 198', 'Unnamed: 199', 'Unnamed: 200', 'Unnamed: 201', 'Unnamed: 202', 'Unnamed: 203', 'Unnamed: 204', 'Unnamed: 205', 'Unnamed: 206', 'Unnamed: 207', 'Unnamed: 208', 'Unnamed: 209', 'Unnamed: 210', 'Unnamed: 211', 'Unnamed: 212', 'Unnamed: 213', 'Unnamed: 214', 'Unnamed: 215', 'Unnamed: 216', 'Unnamed: 217', 'Unnamed: 218', 'Unnamed: 219', 'Unnamed: 220', 'Unnamed: 221', 'Unnamed: 222', 'Unnamed: 223', 'Unnamed: 224', 'Unnamed: 225', 'Unnamed: 226', 'Unnamed: 227', 'Unnamed: 228', 'Unnamed: 229', 'Unnamed: 230', 'Unnamed: 231', 'Unnamed: 232', 'Unnamed: 233', 'Unnamed: 234', 'Unnamed: 235', 'Unnamed: 236', 'Unnamed: 237', 'Unnamed: 238', 'Unnamed: 239', 'Unnamed: 240', 'Unnamed: 241', 'Unnamed: 242', 'Unnamed: 243', 'Unnamed: 244', 'Unnamed: 245', 'Unnamed: 246', 'Unnamed: 247', 'Unnamed: 248', 'Unnamed: 249', 'Unnamed: 250', 'Unnamed: 251', 'Unnamed: 252', 'Unnamed: 253', 'Unnamed: 254', 'Unnamed: 255', 'Unnamed: 256', 'Unnamed: 257', 'Unnamed: 258', 'Unnamed: 259', 'Unnamed: 260', 'Unnamed: 261', 'Unnamed: 262', 'Unnamed: 263', 'Unnamed: 264', 'Unnamed: 265', 'Unnamed: 266', 'Unnamed: 267', 'Unnamed: 268', 'Unnamed: 269', 'Unnamed: 270', 'Unnamed: 271', 'Unnamed: 272', 'Unnamed: 273', 'Unnamed: 274', 'Unnamed: 275', 'Unnamed: 276', 'Unnamed: 277', 'Unnamed: 278', 'Unnamed: 279', 'Unnamed: 280', 'Unnamed: 281', 'Unnamed: 282', 'Unnamed: 283', 'Unnamed: 284', 'Unnamed: 285', 'Unnamed: 286', 'Unnamed: 287', 'Unnamed: 288', 'Unnamed: 289', 'Unnamed: 290', 'Unnamed: 291', 'Unnamed: 292', 'Unnamed: 293', 'Unnamed: 294', 'Unnamed: 295', 'Unnamed: 296', 'Unnamed: 297', 'Unnamed: 298', 'Unnamed: 299', 'Unnamed: 300', 'Unnamed: 301', 'Unnamed: 302', 'Unnamed: 303', 'Unnamed: 304', 'Unnamed: 305', 'Unnamed: 306', 'Unnamed: 307', 'Unnamed: 308', 'Unnamed: 309', 'Unnamed: 310', 'Unnamed: 311', 'Unnamed: 312', 'Unnamed: 313', 'Unnamed: 314', 'Unnamed: 315', 'Unnamed: 316', 'Unnamed: 317', 'Unnamed: 318', 'Unnamed: 319', 'Unnamed: 320', 'Unnamed: 321', 'Unnamed: 322', 'Unnamed: 323', 'Unnamed: 324', 'Unnamed: 325', 'Unnamed: 326', 'Unnamed: 327', 'Unnamed: 328', 'Unnamed: 329', 'Unnamed: 330', 'Unnamed: 331', 'Unnamed: 332', 'Unnamed: 333', 'Unnamed: 334', 'Unnamed: 335', 'Unnamed: 336', 'Unnamed: 337', 'Unnamed: 338', 'Unnamed: 339', 'Unnamed: 340', 'Unnamed: 341', 'Unnamed: 342', 'Unnamed: 343', 'Unnamed: 344', 'Unnamed: 345', 'Unnamed: 346', 'Unnamed: 347', 'Unnamed: 348', 'Unnamed: 349', 'Unnamed: 350', 'Unnamed: 351', 'Unnamed: 352', 'Unnamed: 353', 'Unnamed: 354', 'Unnamed: 355', 'Unnamed: 356', 'Unnamed: 357', 'Unnamed: 358', 'Unnamed: 359', 'Unnamed: 360', 'Unnamed: 361', 'Unnamed: 362', 'Unnamed: 363', 'Unnamed: 364', 'Unnamed: 365', 'Unnamed: 366', 'Unnamed: 367', 'Unnamed: 368', 'Unnamed: 369', 'Unnamed: 370', 'Unnamed: 371', 'Unnamed: 372', 'Unnamed: 373', 'Unnamed: 374', 'Unnamed: 375', 'Unnamed: 376', 'Unnamed: 377', 'Unnamed: 378', 'Unnamed: 379', 'Unnamed: 380', 'Unnamed: 381', 'Unnamed: 382', 'Unnamed: 383', 'Unnamed: 384', 'Unnamed: 385', 'Unnamed: 386', 'Unnamed: 387', 'Unnamed: 388', 'Unnamed: 389', 'Unnamed: 390', 'Unnamed: 391', 'Unnamed: 392', 'Unnamed: 393', 'Unnamed: 394', 'Unnamed: 395', 'Unnamed: 396', 'Unnamed: 397', 'Unnamed: 398', 'Unnamed: 399', 'Unnamed: 400', 'Unnamed: 401', 'Unnamed: 402', 'Unnamed: 403', 'Unnamed: 404', 'Unnamed: 405', 'Unnamed: 406', 'Unnamed: 407', 'Unnamed: 408', 'Unnamed: 409', 'Unnamed: 410', 'Unnamed: 411', 'Unnamed: 412', 'Unnamed: 413', 'Unnamed: 414', 'Unnamed: 415', 'Unnamed: 416', 'Unnamed: 417', 'Unnamed: 418', 'Unnamed: 419', 'Unnamed: 420', 'Unnamed: 421', 'Unnamed: 422', 'Unnamed: 423', 'Unnamed: 424', 'Unnamed: 425', 'Unnamed: 426', 'Unnamed: 427', 'Unnamed: 428', 'Unnamed: 429', 'Unnamed: 430', 'Unnamed: 431', 'Unnamed: 432', 'Unnamed: 433', 'Unnamed: 434', 'Unnamed: 435', 'Unnamed: 436', 'Unnamed: 437', 'Unnamed: 438', 'Unnamed: 439', 'Unnamed: 440', 'Unnamed: 441', 'Unnamed: 442', 'Unnamed: 443', 'Unnamed: 444', 'Unnamed: 445', 'Unnamed: 446', 'Unnamed: 447', 'Unnamed: 448', 'Unnamed: 449', 'Unnamed: 450', 'Unnamed: 451', 'Unnamed: 452', 'Unnamed: 453', 'Unnamed: 454', 'Unnamed: 455', 'Unnamed: 456', 'Unnamed: 457', 'Unnamed: 458', 'Unnamed: 459', 'Unnamed: 460', 'Unnamed: 461', 'Unnamed: 462', 'Unnamed: 463', 'Unnamed: 464', 'Unnamed: 465', 'Unnamed: 466', 'Unnamed: 467', 'Unnamed: 468', 'Unnamed: 469', 'Unnamed: 470', 'Unnamed: 471', 'Unnamed: 472', 'Unnamed: 473', 'Unnamed: 474', 'Unnamed: 475', 'Unnamed: 476', 'Unnamed: 477', 'Unnamed: 478', 'Unnamed: 479', 'Unnamed: 480', 'Unnamed: 481', 'Unnamed: 482', 'Unnamed: 483', 'Unnamed: 484', 'Unnamed: 485', 'Unnamed: 486', 'Unnamed: 487', 'Unnamed: 488', 'Unnamed: 489', 'Unnamed: 490', 'Unnamed: 491', 'Unnamed: 492']
#get rid of unnecessary columns
cleaned_df = cleaned_df.loc[:, ~cleaned_df.columns.str.startswith('Unnamed')]
print(cleaned_df.columns.tolist())
['artist', 'song', 'text', 'length', 'emotion', 'genre', 'album', 'release_date', 'key', 'tempo', 'loudness (db)', 'popularity', 'energy', 'danceability', 'positiveness', 'speechiness', 'liveliness', 'acousticness', 'instrumentalness', 'good_for_party', 'good_for_work/study', 'good_for_relaxation/meditation', 'good_for_exercise', 'good_for_running', 'good_for_yoga/stretching', 'good_for_driving', 'good_for_social_gatherings', 'good_for_morning_routine']
#narrow down to pop genres
pop = cleaned_df[cleaned_df['genre'].str.contains('pop', case=False, na=False)]
len(pop)
99239
#drop lines with empty values
pop = pop.dropna()
len(pop)
68072
#check data types

for col in pop.columns:
    print(f"{col}: {pop[col].dtype}")
artist: object
song: object
text: object
length: object
emotion: object
genre: object
album: object
release_date: object
key: object
tempo: object
loudness (db): object
popularity: object
energy: object
danceability: object
positiveness: object
speechiness: object
liveliness: object
acousticness: object
instrumentalness: object
good_for_party: object
good_for_work/study: object
good_for_relaxation/meditation: object
good_for_exercise: object
good_for_running: object
good_for_yoga/stretching: object
good_for_driving: object
good_for_social_gatherings: object
good_for_morning_routine: object
# attempt to have pandas convert column types on its own

pop = pop.convert_dtypes()

print(pop.dtypes)
artist                            string[python]
song                              string[python]
text                              string[python]
length                            string[python]
emotion                           string[python]
genre                             string[python]
album                             string[python]
release_date                      string[python]
key                               string[python]
tempo                             string[python]
loudness (db)                     string[python]
popularity                        string[python]
energy                            string[python]
danceability                      string[python]
positiveness                      string[python]
speechiness                       string[python]
liveliness                        string[python]
acousticness                      string[python]
instrumentalness                  string[python]
good_for_party                    string[python]
good_for_work/study               string[python]
good_for_relaxation/meditation    string[python]
good_for_exercise                 string[python]
good_for_running                  string[python]
good_for_yoga/stretching          string[python]
good_for_driving                  string[python]
good_for_social_gatherings        string[python]
good_for_morning_routine          string[python]
dtype: object
# manually correct errors in data type

# convert 'release_date' to datetime
pop['release_date'] = pd.to_datetime(pop['release_date'], errors='coerce')

# convert 'length' (minutes:seconds) to timedelta
pop['length'] = '00:' + pop['length'].astype(str)
pop['length'] = pd.to_timedelta(pop['length'], errors='coerce')

# list of columns to convert to int
int_columns = [
    'tempo', 'loudness (db)', 'popularity', 'energy', 'danceability', 'positiveness',
    'speechiness', 'liveliness', 'acousticness', 'instrumentalness',
    'good_for_party', 'good_for_work/study', 'good_for_relaxation/meditation',
    'good_for_exercise', 'good_for_running', 'good_for_yoga/stretching',
    'good_for_driving', 'good_for_social_gatherings', 'good_for_morning_routine'
]

# convert all listed columns to float
for col in int_columns:
    pop[col] = pd.to_numeric(pop[col], errors='coerce')

# check final datatypes
print(pop.dtypes)
artist                             string[python]
song                               string[python]
text                               string[python]
length                            timedelta64[ns]
emotion                            string[python]
genre                              string[python]
album                              string[python]
release_date                       datetime64[ns]
key                                string[python]
tempo                                     Float64
loudness (db)                             Float64
popularity                                  Int64
energy                                      Int64
danceability                                Int64
positiveness                                Int64
speechiness                                 Int64
liveliness                                  Int64
acousticness                                Int64
instrumentalness                            Int64
good_for_party                              Int64
good_for_work/study                         Int64
good_for_relaxation/meditation              Int64
good_for_exercise                           Int64
good_for_running                            Int64
good_for_yoga/stretching                    Int64
good_for_driving                            Int64
good_for_social_gatherings                  Int64
good_for_morning_routine                    Int64
dtype: object
#rename loudness column to omit spaces

pop = pop.rename(columns={'loudness (db)': 'loudness'})
print(pop['release_date'].min())
print(pop['release_date'].max())
1975-01-08 00:00:00
2074-12-14 00:00:00
#not sure why some songs are supposedly released in the future, but let's get rid of those

# get today's date
today = pd.Timestamp.today().normalize()

#filter out dates after today's
pop = pop[pop['release_date'] <= today]
len(pop)
64009
#looking to narrow down the dataset more

#let's see how many songs are referred to as exclusively 'pop'
num_pop_songs = (pop['genre'] == 'pop').sum()
print(num_pop_songs)
7047
#that's still a lot of records so let's narrow it down to songs classified only as 'pop' because that's more relevant to the goal of the research project
pop = pop[pop['genre'] == 'pop'].reset_index(drop=True)
len(pop)
7047
The lyrics column ('text') has bracketed sections that describe who is singing or what portion of the song it is. I want to get rid of those so those descriptive words don't get counted into the lyrics themselves.

import re

#remove all bracketed content like [Verse 1: Justin], [Chorus], etc.
pop['text'] = pop['text'].str.replace(r'\[.*?\]', '', regex=True).str.strip()
#save the pop datset as a csv

pop.to_csv('pop_songs_dataset.csv', index=False)
