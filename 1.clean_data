	
#load the dataset carefully because it's large

import pandas as pd

input_file = 'spotify_dataset.csv'
output_file = 'spotify_dataset_cleaned.csv'

#try to read the CSV properly, allowing multi-line lyrics
try:
    df = pd.read_csv(
        input_file,
        engine='python',         # Handles complex CSVs better
        quotechar='"',           # Assume lyrics are properly quoted
        on_bad_lines='skip',     # Skip broken rows if any
        escapechar='\\',         # Handle escaped quotes inside lyrics
    )
    
    print(f"Successfully loaded {len(df)} records.")

    #save cleaned version
    df.to_csv(output_file, index=False)
    print(f"Cleaned dataset saved to {output_file}")

except Exception as e:
    print(f"Error loading file: {e}")

cleaned_df = pd.read_csv("spotify_dataset_cleaned.csv", engine="python", on_bad_lines="skip")

len(cleaned_df)

print(cleaned_df.columns.tolist())

#get rid of unnecessary columns
cleaned_df = cleaned_df.loc[:, ~cleaned_df.columns.str.startswith('Unnamed')]

print(cleaned_df.columns.tolist())

#narrow down to pop genres
pop = cleaned_df[cleaned_df['genre'].str.contains('pop', case=False, na=False)]

#drop lines with empty values
pop = pop.dropna()

#check data types
for col in pop.columns:
    print(f"{col}: {pop[col].dtype}")

# manually correct errors in data type
# convert 'release_date' to datetime
pop['release_date'] = pd.to_datetime(pop['release_date'], errors='coerce')

# convert 'length' (minutes:seconds) to timedelta
pop['length'] = '00:' + pop['length'].astype(str)
pop['length'] = pd.to_timedelta(pop['length'], errors='coerce')

# list of columns to convert to int
int_columns = [
    'tempo', 'loudness (db)', 'popularity', 'energy', 'danceability', 'positiveness',
    'speechiness', 'liveliness', 'acousticness', 'instrumentalness',
    'good_for_party', 'good_for_work/study', 'good_for_relaxation/meditation',
    'good_for_exercise', 'good_for_running', 'good_for_yoga/stretching',
    'good_for_driving', 'good_for_social_gatherings', 'good_for_morning_routine'
]

# convert all listed columns to float
for col in int_columns:
    pop[col] = pd.to_numeric(pop[col], errors='coerce')

# check final datatypes
print(pop.dtypes)

#rename loudness column to omit spaces
pop = pop.rename(columns={'loudness (db)': 'loudness'})

print(pop['release_date'].min())
print(pop['release_date'].max())

#not sure why some songs are supposedly released in the future, but let's get rid of those
# get today's date
today = pd.Timestamp.today().normalize()

#filter out dates after today's
pop = pop[pop['release_date'] <= today]

#let's see how many songs are referred to as exclusively 'pop'
num_pop_songs = (pop['genre'] == 'pop').sum()
print(num_pop_songs)

#that's still a lot of records so let's narrow it down to songs classified only as 'pop' because that's more relevant to the goal of the research project
pop = pop[pop['genre'] == 'pop'].reset_index(drop=True)
len(pop)

#The lyrics column ('text') has bracketed sections that describe who is singing or what portion of the song it is. I want to get rid of those so those descriptive words don't get counted into the lyrics themselves.

import re
#remove all bracketed content like [Verse 1: Justin], [Chorus], etc.
pop['text'] = pop['text'].str.replace(r'\[.*?\]', '', regex=True).str.strip()

#save the pop datset as a csv

pop.to_csv('pop_songs_dataset.csv', index=False)
